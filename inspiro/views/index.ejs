<!DOCTYPE html>
<html>

<head>
    <title>
        <%= title %>
    </title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
        rel="stylesheet">

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />

    <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body>
    <div style="display: flex; align-items: center; flex-direction: column;">
        <h1>
            <%= title %>
        </h1>
        <p>Welcome to <%= title %>
        </p>
    </div>

    <div class="card">
        <input type="file" name="myFile">
        <button type="submit">Upload</button>
    </div>

    <div class="card">
        <input id="message_input" type="text" placeholder="your message">
    </div>

    <div class="card">
        <input id="vpisna_st" type="text" placeholder="your vpisna st." value="63210116">
    </div>

    <div style="display: flex; justify-content: center;">
        <button class="button-85" role="button" id="generate">Generate</button>
    </div>
    <p id="response_message"></p>

    
    
    <div id="map"></div>
    
    <div id="alternative" style="display: none;"><h1>Alternative activity:</h1>
        <p style="font-size: 20px;" id="alternative_activity"></p>
    </div>

    <div id="joke" style="display: none;"><h1>Joke:</h1>
    <p id="jokeText"></p>
    </div>
    
    <br>
    <p id="info" style="display: none;"><b>Your info:</b></p>
    <p id="message_for_AI"></p>



</body>
<script>
    function decodePolyline(polyline) {
        var index = 0,
            len = polyline.length,
            lat = 0,
            lng = 0,
            coordinates = [];

        while (index < len) {
            var b, shift = 0, result = 0;

            do {
                b = polyline.charCodeAt(index++) - 63;
                result |= (b & 0x1f) << shift;
                shift += 5;
            } while (b >= 0x20);

            var dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
            lat += dlat;

            shift = 0;
            result = 0;

            do {
                b = polyline.charCodeAt(index++) - 63;
                result |= (b & 0x1f) << shift;
                shift += 5;
            } while (b >= 0x20);

            var dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
            lng += dlng;

            coordinates.push([lat / 1e5, lng / 1e5]);
        }
        return coordinates.map(pair => [pair[0].toFixed(6), pair[1].toFixed(6)]);
    }

    let latitude;
    let longitude;
    window.addEventListener('load', () => {
        if ("geolocation" in navigator) {
            // Request the user's current position
            navigator.geolocation.getCurrentPosition(function (position) {
                // Retrieve latitude and longitude
                latitude = position.coords.latitude;
                longitude = position.coords.longitude;
                const location = { lat: latitude, lon: longitude };
                // Do something with the latitude and longitude, like display them on the webpage
                console.log("Latitude: " + location.lat + ", Longitude: " + location.lon);
            });
        } else {
            // Geolocation is not supported by the browser
            console.log("Geolocation is not supported by this browser.");
        }

        document.getElementById('generate').addEventListener('click', () => {

            const messageToSend = document.getElementById('message_input').value;
            const vpisna = document.getElementById('vpisna_st').value;

            async function getFreeMinutes() {
                const urnikResponse = await fetch(`https://urnik.fri.uni-lj.si/timetable/fri-2023_2024-letni-1-17/allocations?student=${vpisna}`);
                const urnikHTML = await urnikResponse.text();
                const doc = new DOMParser().parseFromString(urnikHTML, 'text/html');
                let minuteDifferences = [];
                doc.querySelectorAll('.entry-hover').forEach((el) => {
                    const stvarNaUrniku = el.childNodes[0].textContent.trim();
                    let [day, targetTime, _, targetEndTime] = stvarNaUrniku.split(' ');
                    let [targetHour, targetMinute] = targetTime.split(':');

                    let targetDay;
                    switch (day) {
                        case 'ponedeljek': targetDay = 1; break;
                        case 'torek': targetDay = 2; break;
                        case 'sreda': targetDay = 3; break;
                        case 'ƒçetrtek': targetDay = 4; break;
                        case 'petek': targetDay = 5; break;
                        case 'sobota': targetDay = 6; break;
                        case 'nedelja': targetDay = 0; break;

                        default:
                            console.log('neki si zasrou');
                            break;
                    }

                    const currentDate = new Date();
                    const currentDay = currentDate.getDay();
                    const currentHour = currentDate.getHours();
                    const currentMinute = currentDate.getMinutes();
                    console.log(currentDay, currentHour);

                    let dayDifference = targetDay - currentDay;
                    if (dayDifference < 0) {
                        dayDifference += 7;
                    }
                    let hourDifference = targetHour - currentHour;
                    if (hourDifference < 0) {
                        hourDifference += 24;
                    }
                    let minuteDifference = targetMinute - currentMinute;
                    if (minuteDifference < 0) {
                        minuteDifference += 60;
                        hourDifference--;
                    }

                    console.log(dayDifference, hourDifference, minuteDifference);

                    const totalMinuteDifference = dayDifference * 24 * 60 + hourDifference * 60 + minuteDifference;

                    minuteDifferences.push(totalMinuteDifference);
                });

                return minuteDifferences;
            }

            getFreeMinutes().then(freeMinutesArr => {
                fetch('/inspiro-generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: messageToSend,
                        location: { lat: latitude, lon: longitude },
                        freeMinutes: Math.min(...freeMinutesArr)
                    })
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Failed to send text to server');
                        }
                    })
                    .then(data => {
                        console.log('Response from server:', data);
                        document.getElementById('response_message').textContent = data.aiResponse;
                        document.getElementById('info').style.display = 'block';
                        document.getElementById('message_for_AI').textContent = data.messageForAI;
                        if (data.boredAPIResponse) {
                            document.getElementById('alternative').style.display = 'flex';
                            document.getElementById('alternative').style.flexDirection = 'column';
                            document.getElementById('alternative').style.alignItems = 'center';
                            document.getElementById('alternative_activity').textContent = data.boredAPIResponse.activity;
                        }
                        if (data.jokeFromAI) {
                            document.getElementById('joke').style.display = 'flex';
                            document.getElementById('joke').style.flexDirection = 'column';
                            document.getElementById('jokeText').textContent = data.jokeFromAI;
                        }
                        if (data.aiResponse === 'go for a short walk') {
                            var map = L.map('map').setView([latitude, longitude], 16);
                            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                maxZoom: 19,
                                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors'
                            }).addTo(map);

                            const locationPosition = data.nearbyLocations.results[1].position;
                            const apiKey = '5b3ce3597851110001cf6248346fc3599468482bbb73c2984311ecb5';

                            const requestData = {
                                coordinates: [[longitude, latitude], [locationPosition.lon, locationPosition.lat]],
                                elevation: false,
                                instructions: false,
                            };

                            let request = new XMLHttpRequest();
                            request.open('POST', "https://api.openrouteservice.org/v2/directions/foot-hiking");

                            request.setRequestHeader('Accept', 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8');
                            request.setRequestHeader('Content-Type', 'application/json');
                            request.setRequestHeader('Authorization', '5b3ce3597851110001cf6248346fc3599468482bbb73c2984311ecb5');

                            let coords;
                            request.onreadystatechange = function () {
                                if (this.readyState === 4) {
                                    const geometry = JSON.parse(this.responseText).routes[0].geometry;
                                    coords = decodePolyline(geometry);

                                    // map.eachLayer(layer => {
                                    //     if (layer instanceof L.Polyline) {
                                    //         map.removeLayer(layer);
                                    //     }
                                    // });
                                    L.polyline(coords).addTo(map);
                                    const markerStart = new L.marker([longitude, latitude]).addTo(map);
                                    const markerEnd = new L.marker([locationPosition.lon, locationPosition.lat]).addTo(map);
                                }
                            };

                            const body = JSON.stringify(requestData);

                            request.send(body);
                        }
                        else if (data.aiResponse === 'play video games') {
                            console.log('play games');
                        }
                        else {
                            console.log('else');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
        });
    });
</script>

</html>